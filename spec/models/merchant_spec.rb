require 'rails_helper'

RSpec.describe Merchant, type: :model do
  # See /spec/factories.rb for more info on factories created
  create_factories

  specify { expect(Customer.all.count).to be_positive }
  specify { expect(Merchant.all.count).to be_positive }
  specify { expect(Item.all.count).to be_positive }
  specify { expect(Invoice.all.count).to be_positive }
  specify { expect(Transaction.all.count).to be_positive }
  specify { expect(InvoiceItem.all.count).to be_positive }

  describe 'relationships' do
    it { should have_many(:items) }
    it { should have_many(:invoice_items).through(:items) }
    it { should have_many(:invoices).through(:invoice_items) }
    it { should have_many(:transactions).through(:invoices) }
    it { should have_many(:customers).through(:invoices) }
  end

  describe 'validations' do
    it { should validate_presence_of(:name) }
  end

  describe 'class methods' do
    describe '.any_successful_transactions?' do
      context 'when there are successful transactions' do
        specify { expect(Merchant.any_successful_transactions?(merchant2)).to be true }
      end

      context 'when there are no successful transactions' do
        specify { expect(Merchant.any_successful_transactions?(merchant1)).to be false }
      end
    end

    describe '.disabled_merchants' do
      it 'returns all the disabled merchants' do
        enabled_merchants = [merchant1, merchant2, merchant3, merchant6]
        disabled_merchants = [merchant4, merchant5]

        expect(Merchant.disabled_merchants).to eq(disabled_merchants)
        expect(Merchant.disabled_merchants).to_not include(enabled_merchants)
      end
    end

    describe '.enabled_merchants' do
      it 'returns all the enabled merchants' do
        enabled_merchants = [merchant1, merchant2, merchant3, merchant6]
        disabled_merchants = [merchant4, merchant5]

        expect(Merchant.enabled_merchants).to eq(enabled_merchants)
        expect(Merchant.enabled_merchants).to_not include(disabled_merchants)
      end
    end

    describe '.total_revenue_generated_by_merchant' do
      it 'returns the total revenue generated by a merchant' do
        expect(Merchant.total_revenue_generated_by_merchant(merchant1)).to eq(0)
        expect(Merchant.total_revenue_generated_by_merchant(merchant2)).to eq(140)
        expect(Merchant.total_revenue_generated_by_merchant(merchant3)).to eq(110)
        expect(Merchant.total_revenue_generated_by_merchant(merchant4)).to eq(130)
        expect(Merchant.total_revenue_generated_by_merchant(merchant5)).to eq(150)
        expect(Merchant.total_revenue_generated_by_merchant(merchant6)).to eq(160)
      end
    end

    describe '.top_five_merchants_by_revenue' do
      it 'returns the top five merchants by total revenue generated' do
        top_five_merchants = [merchant6, merchant5, merchant2, merchant4, merchant3]
        expect(Merchant.top_five_merchants_by_revenue).to eq(top_five_merchants)
      end
    end
  end

  describe 'instance methods' do
    describe '#enabled?' do
      context 'when merchant is enabled' do
        specify { expect(merchant1).to be_enabled }
      end

      context 'when merchant is disabled' do
        specify { expect(merchant4).to_not be_enabled }
      end
    end
  end

  describe '#total_revenue' do
    it 'returns the total revenue generated by a merchant' do
      expect(merchant1.total_revenue).to eq(0)
      expect(merchant2.total_revenue).to eq(140)
      expect(merchant3.total_revenue).to eq(110)
      expect(merchant4.total_revenue).to eq(130)
      expect(merchant5.total_revenue).to eq(150)
      expect(merchant6.total_revenue).to eq(160)
    end
  end

  describe '#top_day' do
    it 'returns the merchants top day'
  end
end
